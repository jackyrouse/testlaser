// Generated by gencpp from file cartographer_ros_msgs/StatusResponse.msg
// DO NOT EDIT!


#ifndef CARTOGRAPHER_ROS_MSGS_MESSAGE_STATUSRESPONSE_H
#define CARTOGRAPHER_ROS_MSGS_MESSAGE_STATUSRESPONSE_H


#include <string>
#include <vector>
#include <map>


namespace cartographer_ros_msgs
{
template <class ContainerAllocator>
struct StatusResponse_
{
  typedef StatusResponse_<ContainerAllocator> Type;

  StatusResponse_()
    : code(0)
    , message()  {
    }
  StatusResponse_(const ContainerAllocator& _alloc)
    : code(0)
    , message(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _code_type;
  _code_type code;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _message_type;
  _message_type message;





  typedef boost::shared_ptr< ::cartographer_ros_msgs::StatusResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cartographer_ros_msgs::StatusResponse_<ContainerAllocator> const> ConstPtr;

}; // struct StatusResponse_

typedef ::cartographer_ros_msgs::StatusResponse_<std::allocator<void> > StatusResponse;

typedef boost::shared_ptr< ::cartographer_ros_msgs::StatusResponse > StatusResponsePtr;
typedef boost::shared_ptr< ::cartographer_ros_msgs::StatusResponse const> StatusResponseConstPtr;

// constants requiring out of line definition

/*

template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cartographer_ros_msgs::StatusResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cartographer_ros_msgs::StatusResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}
*/
} // namespace cartographer_ros_msgs

#endif // CARTOGRAPHER_ROS_MSGS_MESSAGE_STATUSRESPONSE_H
